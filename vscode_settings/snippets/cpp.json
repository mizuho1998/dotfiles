{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"template": {
		"prefix": "tmp",
		"body": [
			"#include <iostream>",
			"#include <stdio.h>",
			"#include <vector>",
			"#include <numeric>",
			"#include <algorithm>",
			"using namespace std;",
			"",
			"",
			"int main(){",
			"    int a;",
			"",
			"    cin >> a;",
			"",
			"    cout << a << endl;",
			"	",
			"    return 0;",
			"}",
			"",
			"/*",
			"vector<int> v;",
			"v.resize(10);               // vector のサイズを変更",
			"v.push_back(1);             // 末尾に追加",
			"v.pop_back();               // 末尾データを削除",
			"v.erase(v.begin() + 2);     // 3番目の要素を削除",
			"v.erase(v.begin() + 1, v.begin() + 5);       // 1から4までのを削除",
			"",
			"v.empty()   // vector が空か判定",
			"v.size()    // vector のサイズを取得",
			"",
			"count(オブジェクト名.begin(), オブジェクト名.end(), 値)     // 最初から最後までを走査し、指定値の数を返す",
			"find(オブジェクト名.begin(), オブジェクト名.end(), 値)      // 最初から最後までを走査し、最初の要素へのイテレータを返す",
			"accumulate(オブジェクト名.begin(), オブジェクト名.end(), init)  // 最初から最後まで、要素を積算（全加算）する",
			"sort(オブジェクト名.begin(), オブジェクト名.end())              // 要素を昇順にソート",
			"reverse(オブジェクト名.begin(), オブジェクト名.end())           // 要素を逆順にする",
			"",
			"",
			"struct Data{",
			"    string name;",
			"    int data;",
			"    int rank;",
			"",
			"    # どの値でソートするかを決定",
			"    bool operator<( const Data& right ) const {",
			"        return (data == right.data) ? name < right.name : data > right.data;",
			"    }",
			"};",
			"*/",



		],
		"description": "c++ template"
	}
}